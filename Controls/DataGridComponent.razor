@typeparam TItem

<table class="table">
    <thead>
        <tr>
            @if (Columns == null || Columns.Count <= 0)
            {
                //Create the header with reflection
            }
            else
            {
                //Create the header based on column definitions
                foreach (var column in Columns)
                {
                    @if (column.Alignment != Alignment.NotSet)
                    {
                        switch (column.Alignment)
                        {
                            case Alignment.Left:
                                <th @onclick="@(() => SortData(column))" class="align-left">@column.Caption<span style="float:right" class="@(SortClass(column))"></span></th>
                                break;
                            case Alignment.Center:
                                <th @onclick="@(() => SortData(column))" class="align-center">@column.Caption<span style="float:right" class="@(SortClass(column))"></span></th>
                                break;
                            case Alignment.Right:
                                <th @onclick="@(() => SortData(column))" class="align-right">@column.Caption<span style="float:right" class="@(SortClass(column))"></span></th>
                                break;
                            default:
                                <th @onclick="@(() => SortData(column))">@column.Caption</th>
                                break;
                        }
                        @*<th align="@column.Alignment.ToString().ToLower()">@column.Caption</th>*@
                    }
                    else
                    {
                        <th @onclick="@(() => SortData(column))">
                            @column.Caption
                            <span style="float:right" class="@(SortClass(column))"></span>
                        </th>
                    }
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in DataItems.Skip(Paging.NumOfItemsToSkip(CurrentPageNumber)).Take(Paging.NumOfItemsToTake(DataItems.Count)))
        {
            <tr>
                @foreach (var column in Columns)
                {
                    @if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != Configuration.DataType.NotSet)
                    {
                        string value = string.Empty;
                        switch (column.DataType)
                        {
                            case Configuration.DataType.Date:
                            case Configuration.DataType.DateTime:
                                value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                                break;
                            case Configuration.DataType.Boolean:
                                value = bool.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
                                break;
                            case Configuration.DataType.Currency:
                                value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString();
                                break;
                            default:
                                break;
                        }
                        @if (column.Alignment != Alignment.NotSet)
                        {
                            <td align="@column.Alignment.ToString().ToLower()">@value</td>
                        }
                        else
                        {
                            <td>@value</td>
                        }
                    }
                    else
                    {
                        @if (column.Alignment != Alignment.NotSet)
                        {
                            <td align="@column.Alignment.ToString().ToLower()">@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                        }
                        else
                        {
                            <td>@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                        }
                    }



                }
            </tr>
        }
    </tbody>
</table>

<div class="float-right">
    <ul class="pagination">
        @if (Paging != null && Paging.Enabled)
        {
            @if (Paging.CustomPager)
            {
                @CustomPager
            }
            else
            {
                <li class="page-item"><button class="page-link" style="cursor:pointer" @onclick="GoToPrevPage">Previous</button></li>
                <li class="page-item"><span class="page-link">&nbsp; Page @CurrentPageNumber of @Paging.MaxPageNumber(DataItems.Count)&nbsp; &nbsp;</span></li>
                <li class="page-item"><button class="page-link" style="cursor:pointer" @onclick="GoToNextPage">Next</button></li>
            }
        }
    </ul>
</div>

@code {

        [Parameter]
        public int CurrentPageNumber { get; set; } = 1;

        [Parameter]
        public List<TItem> DataItems { get; set; }

        [Parameter]
        public List<ColumnDefinition> Columns { get; set; }

        [Parameter]
        public PagingConfig Paging { get; set; }

        [Parameter]
        public RenderFragment CustomPager { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        SortData();
    }



    public void GoToNextPage()
    {
        CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, DataItems.Count); //DataItems should not be null
    }

    public void GoToPrevPage()
    {
        CurrentPageNumber = Paging.PrevPageNumber(CurrentPageNumber);
    }


    private string SortClass(ColumnDefinition col)
    {
        if (col.SortDirection != SortDirection.NotSet)
        {
            return $"sort {col.SortDirection.ToString().ToLower()}";
        }
        else
        {
            return "no-sort";
        }
    }

    public void SortData(ColumnDefinition sortByColumn = null)
    {
        bool initial = (sortByColumn == null);

        if (sortByColumn == null)
        {
            sortByColumn = Columns.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
            if (sortByColumn == null)
            {
                return;
            }
        }

        foreach (var column in Columns)
        {


            if (column.DataField != sortByColumn.DataField)
            {
                column.SortDirection = SortDirection.NotSet;
            }
        }
        if (!initial)
        {
            switch (sortByColumn.SortDirection)
            {
                case SortDirection.NotSet:
                    sortByColumn.SortDirection = SortDirection.Up;
                    break;
                case SortDirection.Up:
                    sortByColumn.SortDirection = SortDirection.Down;
                    break;
                case SortDirection.Down:
                    sortByColumn.SortDirection = SortDirection.Up;
                    break;
                default:
                    sortByColumn.SortDirection = SortDirection.Up;
                    break;
            }
        }

        if (sortByColumn.SortDirection == SortDirection.Up)
        {
            DataItems.Sort((x, y) => typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(x).ToString()
            .CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(y).ToString()));          //compare x wert to y wert
        }
        else
        {
            DataItems.Sort((x, y) => typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(y).ToString()
            .CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(x).ToString()));          //compare y wert to x wert
        }
    }



}
